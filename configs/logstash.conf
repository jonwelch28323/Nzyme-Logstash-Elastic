input {
  jdbc {
    jdbc_driver_library => "/root/postgresql-42.7.6.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}"
    jdbc_user => "${DATABASE_USER}"
    jdbc_password => "${DATABASE_PASSWORD}"
    schedule => "*/1 * * * *"
    statement => "
      SELECT
        dot11_ssids.ssid, 
        dot11_fingerprints.fingerprint, 
        dot11_ssids.beacon_advertisements, 
        dot11_ssids.proberesp_advertisements, 
        dot11_ssids.signal_strength_average, 
        dot11_ssids.signal_strength_min, 
        dot11_ssids.signal_strength_max,
        taps.name,
        dot11_bssid_clients.client_mac,
        dot11_bssid_clients.tx_frames,
        dot11_bssid_clients.rx_frames,
        dot11_bssid_clients.rx_bytes,
        dot11_channels.frame_type,
        dot11_channels.frequency,
        dot11_bssids.oui,
        dot11_bssids.created_at,
        dot11_bssids.hidden_ssid_frames,
        dot11_ssid_settings.attribute,
        dot11_ssid_settings.value::text as ssid_value
        FROM dot11_ssids
        JOIN dot11_fingerprints ON dot11_ssids.bssid_id = dot11_fingerprints.bssid_id
        JOIN taps ON dot11_ssids.tap_uuid = taps.uuid
        JOIN dot11_bssid_clients ON dot11_ssids.bssid_id = dot11_bssid_clients.bssid_id
        JOIN dot11_channels ON dot11_ssids.id = dot11_channels.ssid_id
        JOIN dot11_bssids ON dot11_bssids.id = dot11_ssids.bssid_id
        JOIN dot11_ssid_settings ON dot11_ssids.id = dot11_ssid_settings.ssid_id;
    "
    add_field => { "source_type" => "wifi" }
  }

  jdbc {
    jdbc_driver_library => "/root/postgresql-42.7.6.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}"
    jdbc_user => "${DATABASE_USER}"
    jdbc_password => "${DATABASE_PASSWORD}"
    schedule => "*/1 * * * *"
    statement => "
    SELECT 
    bluetooth_devices.uuid, 
    bluetooth_devices.mac, 
    bluetooth_devices.alias, 
    bluetooth_devices.name, 
    bluetooth_devices.rssi, 
    bluetooth_devices.company_id, 
    bluetooth_devices.class_number, 
    bluetooth_devices.tx_power, 
    bluetooth_devices.manufacturer_data, 
    bluetooth_devices.last_seen, 
    taps.name AS tap_name
    FROM taps
    JOIN bluetooth_devices 
    ON bluetooth_devices.tap_uuid = taps.uuid;
  "

    add_field => { "source_type" => "bluetooth" }
  }

  jdbc {
    jdbc_driver_library => "/root/postgresql-42.7.6.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}"
    jdbc_user => "${DATABASE_USER}"
    jdbc_password => "${DATABASE_PASSWORD}"
    schedule => "*/1 * * * *"
    statement => "
    SELECT event_type, details, created_at
    FROM events 
    WHERE event_type LIKE '%DETECTION%';
  "
    add_field => { "source_type" => "alerts" }
  }
  jdbc {
    jdbc_driver_library => "/root/postgresql-42.7.6.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}"
    jdbc_user => "${DATABASE_USER}"
    jdbc_password => "${DATABASE_PASSWORD}"
    schedule => "*/1 * * * *"
    statement => "
    SELECT 
    uavs.*,
    uavs.latitude as uav_latitude,
    uavs.longitude as uav_longitude,
    uavs.operator_latitude as operator_latitude,
    uavs.operator_longitude as operator_longitude, 
    taps.name AS tap_name
    FROM uavs
    JOIN taps ON uavs.tap_uuid = taps.uuid;
    "
    add_field => {"source_type" => "uav" }
  }

  jdbc {
    jdbc_driver_library => "/root/postgresql-42.7.6.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}"
    jdbc_user => "${DATABASE_USER}"
    jdbc_password => "${DATABASE_PASSWORD}"
    schedule => "*/1 * * * *"
    statement => "
    SELECT 
    da.bssid AS sending_bssid,
    dar.bssid AS recv_bssid,
    da.sent_frames,
    dar.received_frames,
    da.created_at,
    t.name AS tap_name
    FROM dot11_disco_activity AS da
    INNER JOIN dot11_disco_activity_receivers AS dar 
    ON da.id = dar.disco_activity_id
    INNER JOIN taps AS t 
    ON da.tap_uuid = t.uuid
    "
    add_field => {"source_type" => "disconnection_activity" }
  }

}

filter {
  mutate {
    copy => { "@timestamp" => "event_timestamp" }
    add_field => { "data_source" => "%{source_type}" }
    remove_field => ["@version", "tags"]
  }
  # Combine UAV lat/lon into geo_point array if both fields exist
  if [source_type] == "uav" and [uav_latitude] and [uav_longitude] {
    mutate {
      convert => { "uav_latitude" => "float" }
      convert => { "uav_longitude" => "float" }
      add_field => { "[uav_location]" => "%{uav_latitude},%{uav_longitude}" }
    }
  }
  if [source_type] == "uav" and [operator_latitude] and [operator_longitude] {
    mutate {
      convert => { "operator_latitude" => "float" }
      convert => { "operator_longitude" => "float" }
      add_field => { "[operator_location]" => "%{operator_latitude},%{operator_longitude}" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTIC_HOSTS}"]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    ssl_verification_mode => "none"
    #cacert => "certs/ca/ca.crt"
    action => "create"
    index => "nzyme-%{source_type}"
  }
}
